plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    var rep_properties = [
            "version"            : project.version,
            "forge_maj_version"  : ((String) project.forge_version).split("-")[1].split("\\.")[0],
            "mc_version"         : project.minecraft_version,
            "pack_format_version": project.pack_format_version,
            "modid"              : project.archives_base_name
    ]

    inputs.properties rep_properties

    filesMatching(["META-INF/mods.toml", "pack.mcmeta"]) {
        expand rep_properties
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        gpr(MavenPublication) {
            groupId = rootProject.maven_group
            artifactId = rootProject.archives_base_name + "-" + project.name
            version = rootProject.mod_version

            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven {
            name = "GithubPackages"
            url = uri("https://maven.pkg.github.com/infinituum17/fastconfigapi")
            credentials {
                username = System.getenv("GITHUB_USERNAME").toString()
                password = System.getenv("MOD_RESOURCES_GITHUB_TOKEN").toString()
            }
        }
    }
}
