plugins {
    id "com.github.johnrengelman.shadow"
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    forgeRuntimeLibrary 'com.moandjiezana.toml:toml4j:0.7.2'
    include 'com.moandjiezana.toml:toml4j:0.7.2'

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')

    modApi("infinituum.void_lib:void_lib-forge:${rootProject.minecraft_version}-${rootProject.void_lib_version}")
}

processResources {
    var rep_properties = [
            "version"            : project.version,
            "forge_maj_version"  : ((String) project.forge_version).split("-")[1].split("\\.")[0],
            "mc_version"         : project.minecraft_version,
            "pack_format_version": project.pack_format_version,
            "modid"              : project.archives_base_name,
            "void_lib_version"   : project.void_lib_version
    ]

    inputs.properties rep_properties

    filesMatching(["META-INF/mods.toml", "pack.mcmeta"]) {
        expand rep_properties
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = rootProject.maven_group
            artifactId = rootProject.archives_base_name + "-" + project.name
            version = rootProject.minecraft_version + "-" + rootProject.mod_version

            pom {
                name = "FastConfigAPI [Forge]"
                description = "A mod that makes creating Configs easy and fast"
                url = "https://github.com/Infinituum17/FastConfigAPI"
                scm {
                    url = "https://github.com/Infinituum17/FastConfigAPI"
                    connection = "scm:git:git://github.com/Infinituum17/FastConfigAPI.git"
                    developerConnection = "scm:git:git@github.com:Infinituum17/FastConfigAPI.git"
                }
                issueManagement {
                    system = "github"
                    url = "https://github.com/Infinituum17/FastConfigAPI/issues"
                }
                licenses {
                    license {
                        name = "MIT"
                        url = "https://spdx.org/licenses/MIT.html"
                    }
                }
                developers {
                    developer {
                        id = "infinituum17"
                        name = "infinituum17"
                    }
                }
            }

            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven {
            name = "InfinituumModResources"
            url "file://" + System.getenv("MOD_RESOURCES").toString() + "/maven"
        }
    }
}
